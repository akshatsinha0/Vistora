AWSTemplateFormatVersion: '2010-09-09'
Description: 'Vistora Compute Stack - ECS Cluster, ALB, and Services'

Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: Environment name prefix

  VPCId:
    Type: String
    Description: VPC ID

  PublicSubnet1Id:
    Type: String
    Description: Public Subnet 1 ID

  PublicSubnet2Id:
    Type: String
    Description: Public Subnet 2 ID

  PrivateSubnet1Id:
    Type: String
    Description: Private Subnet 1 ID

  PrivateSubnet2Id:
    Type: String
    Description: Private Subnet 2 ID

  ALBSecurityGroupId:
    Type: String
    Description: ALB Security Group ID

  ECSSecurityGroupId:
    Type: String
    Description: ECS Security Group ID

  ECSTaskExecutionRoleArn:
    Type: String
    Description: ECS Task Execution Role ARN

  ECSTaskRoleArn:
    Type: String
    Description: ECS Task Role ARN

  BackendImageUri:
    Type: String
    Description: Backend Docker image URI

  FrontendImageUri:
    Type: String
    Description: Frontend Docker image URI

  DBEndpoint:
    Type: String
    Description: Database endpoint

  RedisEndpoint:
    Type: String
    Description: Redis endpoint

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-cluster
        - Key: Project
          Value: Vistora

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-alb
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !Ref ALBSecurityGroupId
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-alb
        - Key: Project
          Value: Vistora

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-backend-tg
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPCId
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-backend-tg
        - Key: Project
          Value: Vistora

  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-frontend-tg
      Port: 3000
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref VPCId
      HealthCheckEnabled: true
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-frontend-tg
        - Key: Project
          Value: Vistora

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /api/*
            - /socket.io/*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup

  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}/backend
      RetentionInDays: 7

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}/frontend
      RetentionInDays: 7

  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-backend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      TaskRoleArn: !Ref ECSTaskRoleArn
      ContainerDefinitions:
        - Name: backend
          Image: !Ref BackendImageUri
          Essential: true
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: '8080'
            - Name: DATABASE_URL
              Value: !Sub postgresql://vistora_admin:${DBPassword}@${DBEndpoint}:5432/vistora
            - Name: REDIS_URL
              Value: !Sub redis://${RedisEndpoint}:6379
          Secrets:
            - Name: JWT_SECRET
              ValueFrom: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:vistora/jwt
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: backend
      Tags:
        - Key: Project
          Value: Vistora

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-frontend
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !Ref ECSTaskExecutionRoleArn
      TaskRoleArn: !Ref ECSTaskRoleArn
      ContainerDefinitions:
        - Name: frontend
          Image: !Ref FrontendImageUri
          Essential: true
          PortMappings:
            - ContainerPort: 3000
              Protocol: tcp
          Environment:
            - Name: VITE_API_URL
              Value: !Sub http://${ApplicationLoadBalancer.DNSName}/api
            - Name: VITE_WS_URL
              Value: !Sub http://${ApplicationLoadBalancer.DNSName}
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend
      Tags:
        - Key: Project
          Value: Vistora

  BackendService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-backend-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref BackendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
          SecurityGroups:
            - !Ref ECSSecurityGroupId
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 8080
          TargetGroupArn: !Ref BackendTargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Project
          Value: Vistora

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub ${EnvironmentName}-frontend-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FrontendTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
          SecurityGroups:
            - !Ref ECSSecurityGroupId
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn: !Ref FrontendTargetGroup
      HealthCheckGracePeriodSeconds: 60
      Tags:
        - Key: Project
          Value: Vistora

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${EnvironmentName}-ECSClusterName

  ALBDNSName:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${EnvironmentName}-ALBDNSName

  BackendServiceName:
    Description: Backend Service Name
    Value: !GetAtt BackendService.Name
    Export:
      Name: !Sub ${EnvironmentName}-BackendServiceName

  FrontendServiceName:
    Description: Frontend Service Name
    Value: !GetAtt FrontendService.Name
    Export:
      Name: !Sub ${EnvironmentName}-FrontendServiceName
